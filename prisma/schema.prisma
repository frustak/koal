generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "sqlite"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Todo {
    id           String    @id @default(cuid())
    createdAt    DateTime  @default(now())
    updatedAt    DateTime  @updatedAt
    title        String
    description  String?
    isDone       DateTime?
    priority     String    @default("urgent")
    goalId       String
    order        Int?
    showFromDate DateTime? @default("2023-03-29T19:55:51.666Z")
    Goal         Goal      @relation(fields: [goalId], references: [id], onDelete: Cascade)

    @@index([goalId])
}

model Goal {
    id        String     @id @default(cuid())
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    name      String
    ownerId   String
    Todo      Todo[]
    DayFocus  DayFocus[]
    User      User       @relation(fields: [ownerId], references: [id])

    @@index([ownerId])
}

model DayFocus {
    // What is important for the day?
    id             String   @id @default(cuid())
    date           DateTime
    ownerId        String
    goalId         String
    focusTimeStart DateTime
    focusTimeEnd   DateTime
    User           User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    Goal           Goal     @relation(fields: [goalId], references: [id], onDelete: Cascade)

    @@unique([ownerId, date])
    @@index([goalId])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String     @id @default(cuid())
    name          String?
    email         String?    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    goals         Goal[]
    DayFocus      DayFocus[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
